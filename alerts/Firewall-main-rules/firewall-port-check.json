{
  "metadata": {
    "name": "Firewall port checker",
    "description": "This watcher checks if there is traffic ongoing on restricted ports",
    "time_window": "10m",
    "threshold": 1
  },
  "trigger": {
    "schedule": {
      "interval": "1m"
    }
  },
  "input": {
    "chain": {
      "inputs": [{
          "http_allowed_ports": {
            "http": {
              "request": {
                "url": "http://simulator:3000/systemParts/main-bank"
              }
            }
          }
        },
        {
          "search_logs": {
            "search": {
              "request": {
                "body": {
                  "size": 0,
                  "query": {
                    "bool": {
                      "filter": [{
                        "range": {
                          "@timestamp": {
                            "gte": "now-{{ctx.metadata.time_window}}"
                          }
                        }
                      }]
                    }
                  },
                  "aggs": {
                    "group_by_src_port": {
                      "terms": {
                        "field": "src-port"
                      }
                    }
                  }
                },
                "indices": [
                  "firebeat-*"
                ]
              }
            }
          }
        }
      ]
    }
  },
  "condition": {
    "script": {
      "lang": "painless",
      "inline": "def ports = new ArrayList(); for(def port: ctx.payload.search_logs.aggregations.group_by_src_port.buckets){ ports.add(port.key)} ports.removeIf(item-> ctx.payload.http_allowed_ports.allowedPorts.contains(item)); return ports.size() != 0;"
    }
  },
  "actions": {
    "logging-action": {
      "logging": {
        "text": "Detected traffic on restricted ports"
      }
    },
    "webhook-action": {
      "transform": {
        "script": {
          "lang": "painless",
          "inline": "def ports = new ArrayList(); for(def port: ctx.payload.search_logs.aggregations.group_by_src_port.buckets){ ports.add(port)} ports.removeIf(item-> ctx.payload.http_allowed_ports.allowedPorts.contains(item.key)); return ports;"
        }
      },
      "webhook": {
        "method": "POST",
        "url": "http://simulator:3000/systemParts/main-bank/restrictPorts",
        "body": "{\"ports\": [{{#ctx.payload._value}}\"{{key}}\",{{/ctx.payload._value}} \"eof\"] }"
      }
    }
  }
}
